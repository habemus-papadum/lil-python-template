# AGENTS.md

This file provides guidance to AI agents when working with code in this repository.

## Project Overview

This is a Python library called `{{ package_name }}` (package name: `{{ package_name }}`, module name: `{{ package_slug }}`). {{ package_description }}

The project uses a modern Python toolchain with UV for dependency management.

## Important Rules

### Version Management
**NEVER modify the version number in any file.** Version numbers are managed exclusively by humans. Do not change:
- `pyproject.toml` version field
- `src/{{ package_slug }}/__init__.py` `__version__` variable
- Any version references in documentation

If you think a version change is needed, inform the user but do not make the change yourself.

### Release Management
**ABSOLUTELY NEVER RUN THE RELEASE SCRIPT (`./release.sh`).** This is a production deployment script that:
- Publishes the package to PyPI (affects real users)
- Creates GitHub releases (public and permanent)
- Pushes commits and tags to the repository
- Triggers documentation deployment

**This script should ONLY be run by a human who fully understands the consequences.** Do not:
- Execute `./release.sh` under any circumstances
- Suggest running it unless the user explicitly asks about the release process
- Include it in automated workflows or scripts

If the user needs to make a release, explain the process but let them run the script themselves.

## Development Commands

### Environment Setup
```bash
# Install dependencies and sync environment (includes dev dependencies)
uv sync --frozen

{%- if include_docs %}
# Or install with all optional dependencies (if package has extras)
uv sync --frozen --all-extras
{%- endif %}
```

**Important for Development**:
- Use `uv sync --frozen` to ensure the lockfile is used without modification, maintaining reproducible builds
{%- if include_docs %}
- The `--all-extras` flag installs optional dependencies if your package defines any
{%- endif %}

### Testing
```bash
# Run all tests
uv run pytest

# Run a specific test file
uv run pytest tests/test_example.py

# Run a specific test function
uv run pytest tests/test_example.py::test_version

# Run tests with coverage
uv run pytest --cov=src/{{ package_slug }} --cov-report=xml --cov-report=term
```

### Code Quality
```bash
# Check code with ruff
uv run ruff check .

# Format code with ruff
uv run ruff format .

# Fix auto-fixable issues
uv run ruff check --fix .
```

{%- if include_docs %}

### Documentation
```bash
# Serve documentation locally (auto-reloads on changes)
uv run mkdocs serve

# Build documentation
uv run mkdocs build

# Test demo notebooks (REQUIRED after any notebook changes)
./test_notebooks.sh
```

**Important**: After making any changes to demo notebooks (files in `docs/demos/*.ipynb`), you MUST run `./test_notebooks.sh` to verify the notebook executes without errors. Do not consider notebook changes complete until this test passes.
{%- endif %}

### Publishing
```bash
# Build and publish to PyPI (requires credentials)
./publish.sh
```

## Architecture

### Project Structure
- **src/{{ package_slug }}/**: Main package source code (src-layout)
  - `__init__.py`: Package initialization and version
- **tests/**: Test suite using pytest
  - `test_example.py`: Example tests
{%- if include_docs %}
- **docs/**: MkDocs documentation with mkdocstrings for API reference
  - `index.md`: Home page
  - `reference.md`: API reference
  - `demos/`: Demo notebooks (if included)
{%- endif %}

### Key Constraints
- **Python Version**: Requires Python {{ python_version }}+
- **Dependency Management**: Uses UV exclusively; uv.lock is committed
- **Build System**: Uses Hatch/Hatchling for building distributions
{%- if include_docs %}
- **Documentation Style**: NumPy docstring style (see mkdocs.yml)
{%- endif %}

### Code Standards
- **Ruff Configuration**:
  - Target: Python {{ python_version }}
  - Line length: 120 characters
  - Linting rules: E (pycodestyle errors), F (pyflakes), W (warnings), I (isort)
- **Type Hints**: Use type hints where appropriate
- **Docstrings**: NumPy style, include Parameters, Returns, Raises sections

### Testing Strategy
- Test files must start with `test_` prefix
- Test classes must start with `Test` prefix
- Test functions must start with `test_` prefix
- Tests run with `-s` flag (no capture) by default
- Coverage reporting: use `--cov=src/{{ package_slug }} --cov-report=xml --cov-report=term`

### Testing Configuration
The pytest configuration is in `pyproject.toml`:
```toml
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-s"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
```

Coverage configuration is also in `pyproject.toml`:
```toml
[tool.coverage.run]
source = ["src/{{ package_slug }}"]
relative_files = true
omit = [
    "*/tests/*",
    "*/testing.py",
]
```

## CI/CD

### Continuous Integration
The project uses GitHub Actions for CI (`.github/workflows/ci.yml`):
- Runs on every push to main and pull requests
- Executes linting with ruff
- Runs unit tests with coverage reporting
{%- if include_docs %}
- Tests all demo notebooks in read-only mode
- Builds documentation to verify it compiles
{%- endif %}
- Posts coverage report as PR comment

{%- if include_github_actions and include_docs %}

### Documentation Deployment
Documentation is deployed to GitHub Pages (`.github/workflows/docs.yml`):
- Triggered when a GitHub release is published
- Can also be triggered manually via workflow_dispatch
- Builds and deploys documentation to GitHub Pages
{%- endif %}

### Release Process
Releases are managed by the `./release.sh` script (HUMANS ONLY):
1. Validates git repo is clean
2. Checks version has `-alpha` suffix
3. Runs all validation (tests{% if include_docs %}, notebooks{% endif %}, linting{% if include_docs %}, docs{% endif %})
4. Strips `-alpha` from version for release
5. Creates release commit and tag
6. Publishes to PyPI
7. Creates GitHub release
8. Bumps to next development version with `-alpha`

The release script expects versions to follow the pattern: `X.Y.Z-alpha` → `X.Y.Z` → `X.Y.(Z+1)-alpha`
